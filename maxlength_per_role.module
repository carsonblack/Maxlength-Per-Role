<?php
// $Id$
/**
 * @file
 * Module to enable a max length on CCK text fields based upon user role.
 */


/**
 * Implementation of hook_perm().
 */
function maxlength_per_role_perm() {
  return array(ADMINISTER_MAXLENGTH_PER_ROLE);
}

/**
 * Implementation of hook_form_alter().
 */
function maxlength_per_role_form_alter(&$form, &$form_state, $form_id) {
  // Editing content
  if ($form['#id'] == 'node-form') {
    _maxlength_per_role_content_form_alter($form, $form_state, $form_id);
  }

  // Editing a CCK text field settings.
  elseif ($form_id == 'content_field_edit_form') {
    _maxlength_per_role_cck_form_alter($form, $form_state, $form_id);
  }

  // Deleting a CCK text field.
  elseif ($form_id == '_content_admin_field_remove') {
    variable_del(MAXLENGTH_PER_ROLE_NODE_TYPE . $form['field_name']['#value'] . '_enable_per_role_maxlength');
    variable_del(MAXLENGTH_PER_ROLE_NODE_TYPE . $form['field_name']['#value'] . '_per_role_maxlength_limit');
    variable_del(MAXLENGTH_PER_ROLE_NODE_TYPE . $form['field_name']['#value'] . '_per_role_maxlength_roles');
    variable_del(MAXLENGTH_PER_ROLE_NODE_TYPE . $form['field_name']['#value'] . '_per_role_maxlength_text');
  }
}

/**
 * Handles the alteration of the fields on the content edit form.
 */
function _maxlength_per_role_content_form_alter(&$form, &$form_state, $form_id) {
  $type = $form['type']['#value'];
  
  // Update CCK fields
  if (module_exists('content')) {
    // Get a list of all the CCK fields for this content type 
    $list = array_keys(content_fields(NULL, $type));
    // Update CCK fields as needed
    foreach ($list as $field) {
      if (is_array($form[$field])) {
        foreach (element_children($form[$field]) as $key) {
          //form element, current value of the field, name of the string, type of form element
          _maxlength_per_role_format_element($form[$field][$key], $form[$field][$key]['#default_value']['value'], $field, str_replace('_', '-', $field) .'-'. $key .'-value', $type);
        }
      }
    }
  }
}

/**
 * Handles the additions to the field configuration form for the CCK field.
 */
function _maxlength_per_role_cck_form_alter(&$form, &$form_state, $form_id) {
  // if form is being loaded, add extra config fields for the per role maximum length settings
  if (empty($form['#post'])) {
    $new_fields = array();
    // Iterate through the form fields and when the max_length field is encountered, add the max 
    // length per role fields to the form.
    foreach ($form['field'] as $key => $field) {
      $new_fields[$key] = $field;
      if ($key == 'max_length') {
        // Fieldset to contain the Max Length Per Role Settings
        $new_fields['Max Length Per Role'] = array(
          '#type' => 'fieldset',
          '#title' => t('Max Length Per Role Settings'),
          '#description' => t('Setting the Maxlength Per Role Settings will override the Maximum Length in the Global Settings section for any of the roles selected below. NOTE: If the Maximum Length you set in the Global Settings is less than the Per Role Maximum Length the Per Role Maximum Length will never take effect.'),
          '#collapsible' => TRUE,
          '#collapsed' => FALSE,
        );
        // Check box to enable the Per Role Maxlength
        $new_fields['Max Length Per Role'][MAXLENGTH_PER_ROLE_NODE_TYPE . $form['field_name']['#value'] . '_enable_per_role_maxlength'] = array(
          '#type' => 'checkbox',
          '#title' => t('Enable Per Role Maxlength.'),
          '#default_value' => variable_get(MAXLENGTH_PER_ROLE_NODE_TYPE . $form['field_name']['#value'] . '_enable_per_role_maxlength', '0'),
          '#description' => t('This will enable maxlength for this field only for the roles selected.'),
        );
        // Textfield to set the maximum length. This keeps this setting seperate from the default max length setting
        // and makes it easier to apply as needed. 
        $new_fields['Max Length Per Role'][MAXLENGTH_PER_ROLE_NODE_TYPE . $form['field_name']['#value'] . '_per_role_maxlength_limit'] = array(
          '#type' => 'textfield',
          '#title' => t('Per Role Maximum Length'),
          '#default_value' => variable_get(MAXLENGTH_PER_ROLE_NODE_TYPE . $form['field_name']['#value'] . '_per_role_maxlength_limit', '0'),
          '#description' => t('The maximum length of the field in characters. This is only applied when the Per Role Maxlength is enabled, at least one role is selected, AND when this limit is less than the Maximum Length set in the Global Settings section.'),
        );
        // A select field with options set to the list of all availabale roles
        $new_fields['Max Length Per Role'][MAXLENGTH_PER_ROLE_NODE_TYPE . $form['field_name']['#value'] . '_per_role_maxlength_roles'] = array(
          '#type' => 'select',
          '#options' => user_roles(),
          '#multiple' => TRUE,
          '#title' => t('Per Role Maximum Length Roles'),
          '#default_value' => variable_get(MAXLENGTH_PER_ROLE_NODE_TYPE . $form['field_name']['#value'] . '_per_role_maxlength_roles', '0'),
          '#description' => t('Select the roles that will have maximum length applied. Use caution when selecting the anonymous and authenticated user roles. This may have unintended consequences.'),
        );
        // Textarea to set the message that is shown to a user below a limited field. 
        $new_fields['Max Length Per Role'][MAXLENGTH_PER_ROLE_NODE_TYPE . $form['field_name']['#value'] . '_per_role_maxlength_text'] = array(
          '#type' => 'textarea',
          '#title' => t('Per Role Maximum Length Count down Message'),
          '#default_value' => variable_get(MAXLENGTH_PER_ROLE_NODE_TYPE . $form['field_name']['#value'] . '_per_role_maxlength_text', 'Content limited to !limit characters, remaining: <strong>!remaining</strong>'),
          '#description' => t('The text used in the Javascript message under the input, where "!limit" and "!remaining" are replaced by the appropriate numbers. !limit is the number you entered in the Per Role Maximum Length field and !remaining are the number of characters remaining until the limit is reached.'),
        );
      }// End if ($key == 'max_length')
    }// End foreach ($form['field'] as $key => $field)
    $form['field'] = $new_fields;
  }
  $form['#submit'][] = '_maxlength_per_role_cck_form_submit';
}

/**
 * Handles the additional form field submission for the maxlength per role fields found on the field configuration
 */
function _maxlength_per_role_cck_form_submit($form, &$form_state) {
  // note, max length for the CCK field is stored in this way as for textareas, its not in $element var passed to theme functions.
  variable_set(MAXLENGTH_PER_ROLE_NODE_TYPE . $form['field_name']['#value'] . '_enable_per_role_maxlength', $form['#post'][MAXLENGTH_PER_ROLE_NODE_TYPE . $form['field_name']['#value'] . '_enable_per_role_maxlength']);
  variable_set(MAXLENGTH_PER_ROLE_NODE_TYPE . $form['field_name']['#value'] . '_per_role_maxlength_limit', $form['#post'][MAXLENGTH_PER_ROLE_NODE_TYPE . $form['field_name']['#value'] . '_per_role_maxlength_limit']);
  variable_set(MAXLENGTH_PER_ROLE_NODE_TYPE . $form['field_name']['#value'] . '_per_role_maxlength_roles', $form['#post'][MAXLENGTH_PER_ROLE_NODE_TYPE . $form['field_name']['#value'] . '_per_role_maxlength_roles']);
  variable_set(MAXLENGTH_PER_ROLE_NODE_TYPE . $form['field_name']['#value'] . '_per_role_maxlength_text', $form['#post'][MAXLENGTH_PER_ROLE_NODE_TYPE . $form['field_name']['#value'] . '_per_role_maxlength_text']);
}

/**
 * Formats a form element to use maxlength value.
 *
 * @arg array &$element
 *   The form element which should have the maxlength applied.
 * @arg string $value
 *   The current value of the field.
 * @arg string $field
 *   The name of the string.
 * @arg string $id
  *   The CSS id attribute of the form element that will have the limit applied
 * @arg string $type
 *   The type of form element.
 *
 */
function _maxlength_per_role_format_element(&$element, $value = '', $field, $id, $type = '') {
  // Retrieve the settings values for this field
  $values = _maxlength_per_role_get_values($field, $type);
  // Retrieve the global user variable so you can get the information for the current user.
  global $user;
  // Check the roles of this user against the roles that have limiting enabled for this field.
  $enable_for_this_user = _maxlength_per_role_check_role($user, $values['per_role_maxlength_roles']);
  
  // If maxlength per role settings have been set for this field and this user has a role that is supposed to be limited 
  // proceed with adding limiting to this field.
  if ($values !== FALSE AND isset($values['per_role_maxlength_limit']) AND $values['per_role_maxlength_limit'] AND isset($values['enable_per_role_maxlength']) AND $values['enable_per_role_maxlength'] AND $enable_for_this_user) {
    $remaining = $values['per_role_maxlength_limit'] - drupal_strlen($value);
    
    // Add the maxlength javascript from the maxlength module to the page
    $path = drupal_get_path('module', 'maxlength');
    drupal_add_js($path .'/maxlength.js');
    
    // If there are less than zero available characters remaining (because the field value has been 
    // previously set with a higher character count than the limit by a user that does not have a limited role) 
    // display a warning message and concatenate the default value to the character limited string.
    if ($remaining < 0) {
      drupal_set_message(
        t('%body_field_label has been limited to %limit characters!',
        array(
          '%body_field_label' => $element['#title'],
          '%limit' => $values['per_role_maxlength_limit'])
        ),
        'error'
      );
      $element['#default_value']['value'] = drupal_substr($element['#default_value']['value'], 0, $values['per_role_maxlength_limit']);
      $remaining = 0;
    }// if ($remaining < 0)
    
    // Add the settings for the id and limit of this field to the Drupal javascript settings storage to enforce a limit on this textarea
    $js_settings = array(
      'maxlength' => array(
        'edit-'. $id => $values['per_role_maxlength_limit'],
      ),
    );
    drupal_add_js($js_settings, 'setting');
    
    // Add a container div to the end of this field to keep track of the maxlength limit
    $element['#suffix'] = '<div id="maxlength-'. $id .'"
      class="maxlength-counter">'. t($values['per_role_maxlength_text'], array('!limit' => $values['per_role_maxlength_limit'], '!remaining' => '<span class="maxlength-counter-remaining">'. $remaining .'</span>')) .'</div>';
      
  }// if ($values !== FALSE AND isset($values['enable_per_role_maxlength']) AND $values['per_role_maxlength_limit'])
}

/**
 * Retrieve the per role maxlength system variables for the field
 */
function _maxlength_per_role_get_values($field = 'body', $type = '') {
  $values = '';
  $values['per_role_maxlength_limit'] = FALSE;
  
  $values['enable_per_role_maxlength'] = variable_get(MAXLENGTH_PER_ROLE_NODE_TYPE . $field . '_enable_per_role_maxlength', FALSE);
  $values['per_role_maxlength_limit'] = variable_get(MAXLENGTH_PER_ROLE_NODE_TYPE . $field . '_per_role_maxlength_limit', FALSE);
  $values['per_role_maxlength_roles'] = variable_get(MAXLENGTH_PER_ROLE_NODE_TYPE . $field . '_per_role_maxlength_roles', FALSE);
  $values['per_role_maxlength_text'] = variable_get(MAXLENGTH_PER_ROLE_NODE_TYPE . $field . '_per_role_maxlength_text', FALSE);

  if ($values['per_role_maxlength_limit']) {
    return $values;
  }
  else {
    return FALSE;
  }
}

/**
 * Check to see if a user has a maxlength limited role
 *
 * @arg object $user
 *  A user object
 * @arg array $enabled_roles
 *  An array of roles that have been set using the maxlength per role settings
 */
function _maxlength_per_role_check_role($user, $enabled_roles) {
  if (is_array($enabled_roles)) {
    $users_roles = array_flip($user->roles);
    foreach ($enabled_roles as $key => $enabled_role) {
      if (in_array($enabled_role, $users_roles)) {
        return TRUE;
      }// END if (in_array($enabled_role,$user->roles))
    }//END foreach ($enabled_roles as $key=>$enabled_role)
  }//END if (is_array($enabled_roles))
}


/**
 * Implementation of hook_nodeapi().
 *
 */
function maxlength_per_role_nodeapi(&$node, $op, $a3 = NULL, $a4 = NULL) {
  $fields = array('title', 'body');

  foreach ($fields as $field) {
    $limit = intval(variable_get(MAXLENGTH_PER_ROLE_NODE_TYPE . $field .'_'. $node->type, ''));
    if ($limit > 0) {
      switch ($op) {
        case 'validate':
          $form = $a3;
          if (drupal_strlen($node->$field) > $limit) {
            form_set_error($field, t('The !field field has exceeded its maximum number of characters (!limit).', array('!limit' => $limit, '!field' => $field)));
          }
          break;
      }// END switch ($op)
    }// END if ($limit > 0)
  }
}

